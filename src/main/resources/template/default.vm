## Tutorial for writing your templates
##
## 1. First you need to know basic syntax of velocity[1].
## 2. Then it is necessary to understand the variable that CodeGenerator provides
##    and its inner structure for retrieving the information you need for generating code.
## 3. Learn to use the utils provided so that you can ask for further information
##    or reduce your workload.
##
## Variables Provided (Class Mode)
## -------------------------------
## Class mode means you want to create new classes(file).
##
## - ClassName: String     The name spcified by `Target Class Name`
## - PackageName: String   The package name specified by `Target Class Name`
## - class0: ClassEntry    The class that the action is triggered upon
##   - raw: PsiClass
##   - type: PsiClassType
##   - elementType: ClassEntry  The type of the element of the collection/array if the class is a collection/array
##   - keyType: ClassEntry  The type of the key of the map if the class is a map
##   - valueType: ClassEntry  The type of the value of the map if the class is a map
##   - array: boolean
##   - colleciton: boolean
##   - set: boolean
##   - map: boolean
##   - packageName: String
##   - importList: List<String>
##   - fields: List<FieldEntry>
##   - allFields: List<FieldEntry>
##   - methods: List<MethodEntry>
##   - allMethods: List<MethodEntry>
##   - innerClasses: List<ClassEntry>
##   - allInnerClasses: List<ClassEntry>
##   - typeParamList:  List<String>
##   - name: String    The simple name of this class.
##   - qualifiedName: String   The qualified name of this class.
##   - superClass: ClassEntry   The superclass of this class
##   - superName: String    The simple name of the superclass of this class
##   - superQualifiedName: String  The qualified name of the superclass of this class
##   - typeParams: int   The number of parameters of this type
##   - hasSuper: boolean
##   - deprecated: boolean
##   - enum: boolean
##   - exception: boolean
##   - abstract: boolean
##   - implementNames: String[]
##   - isImplements(String): bool  Whether this class implements the specified interface, include directly implements, or indirectly implements.
##   - isExtends(String): bool
##   - matchName(String): bool Whether the class name matches the specified name.
##
## - class1: ClassEntry    The first selected class, where `1` is the postfix
##                         you specify in pipeline
##   ...
##
## - MemberEntry (FieldEntry/MethodEntry common properties)
##    - raw: PsiField (for field), PsiMethod (for method)
##    - element: FieldElement (for field), MethodElement (for method)
##    - name: String
##    - accessor: String
##    - array: boolean
##    - nestedArray: boolean
##    - primitiveArray: boolean
##    - stringArray: boolean
##    - objectArray: boolean
##    - collection: boolean
##    - list: boolean
##    - set: boolean
##    - map: boolean
##    - primitive: boolean
##    - numeric: boolean
##    - boolean: boolean
##    - char: boolean
##    - byte: boolean
##    - short: boolean
##    - int: boolean
##         Check whether the field is a primitive int type or a Integer type. This
##         property is abscent in the Element interface. We have add this property
##         in the MemberEntry interface.
##    - long: boolean
##         Check whether the field is a primitive long type or a Long type. This
##         property has a BUG in the default implementation of AbstractElement class.
##         We have fixed this bug in the MemberEntry interface.
##    - float: boolean
##    - double: boolean
##    - void: boolean
##    - string: boolean
##    - object: boolean
##    - date: boolean
##    - calendar: boolean
##    - instant: boolean
##          Check whether the field is a java.time.Instant type. This property is
##          abscent in the Element interface. We have add this property in the
##          MemberEntry interface.
##    - localDate: boolean
##          Check whether the field is a java.time.LocalDate type. This property is
##          abscent in the Element interface. We have add this property in the
##          MemberEntry interface.
##    - localTime: boolean
##          Check whether the field is a java.time.LocalTime type. This property is
##          abscent in the Element interface. We have add this property in the
##          MemberEntry interface.
##    - localDateTime: boolean
##          Check whether the field is a java.time.LocalDateTime type. This property is
##          abscent in the Element interface. We have add this property in the
##          MemberEntry interface.
##    - type: String
##    - typeName: String
##    - typeQualifiedName: String
##    - notNull: boolean
##    - modifierStatic: boolean
##    - modifierPublic: boolean
##    - modifierProtected: boolean
##    - modifierPackageLocal: boolean
##    - modifierPrivate: boolean
##    - modifierFinal: boolean
##    - hasAnnotation(String fullyQualifiedName): bool
##          Check if the member has the annotation with the fully qualified name.
##          If the member does has the annotation with the fully qualified name,
##          this method will also check the simple name of the annotation.
##    - getAnnotation(String fullyQualifiedName): PsiAnnotation
##          Get the annotation with the fully qualified name.
##          If the annotation with the fully qualified name does not exist, this method
##          will try to get the annotation with the simple name of the fully qualified name.
##    - getAnnotationAttribute(String fullyQualifiedName, String attributeName): String
##          Get the value of the attribute of the annotation with the fully qualified name.
##          If the attribute does not exist, this method will try to get the attribute of the
##          annotation with the simple name of the fully qualified name.
##    - getAnnotationAttributes(final String fullyQualifiedName, final String attributeName): String[]
##          Get the values of the attribute of the annotation with the fully qualified name.
##          If the attribute does not exist, this method will try to get the attribute of the
##          annotation with the simple name of the fully qualified name.
##          If the attribute has a single value, this method will return an array with the
##          text representation of the single value; if the attribute has multiple values, this
##          method will return an array with the text representation of the multiple values.
##
## - FieldEntry
##   - constant: boolean
##   - modifierTransient: boolean
##   - modifierVolatile: boolean
##   - enum: boolean
##   - matchName(String): bool
##
## - MethodEntry
##   - methodName: String
##   - fieldName: String
##   - modifierAbstract: boolean
##   - modifierSynchronzied: boolean
##   - modifierSynchronized: boolean
##   - returnTypeVoid: boolean
##   - getter: boolean
##   - deprecated: boolean
##   - matchName(String): bool
##
## Variables for Body Mode
## -----------------------
## - class0: ClassEntry         The current class
## - fields: List<FieldEntry>   All selected fields
## - methods: List<MethodEntry> All selected methods
## - members: List<MemberEntry> selected fields+methods
## - parentMethod: MethodEntry  The nearest method that surround the current cursor
##
## Utilities
## ---------
## - settings: CodeStyleSettings settings of code style
## - project: Project            The project instance, normally used by Psi related utilities
## - helper: GenerationHelper
## - StringUtil: Class           The class com.intellij.openapi.util.text.StringUtil
## - StringUtilEx: Class         Extension of StringUtil, including all static functions in StrinUtil, with additional
##                               functions: parseArrayInitializerText(text), unquoteStringArray(array)
## - NameUtil: Class             The class com.intellij.psi.codeStyle.NameUtil
## - NameUtilEx: Class           Extension of NameUtil, including all static funtions in NameUtil, with additional
##                               functions: lowercaseAndUnderscore(name), getGetterName(field), getSetterName(field)
## - PsiShortNamesCache: Class   utility to search classes
## - PsiJavaPsiFacade: Class     Java specific utility to search classes
## - GlobalSearchScope: Class    class to create search scopes, used by above utilities
## - EntryFactory: Class         EntryFactory.of(...) to turn PsiXXX to XXXEntry.
##
## Other feature
## -------------
## - Auto import.      If the generated code contains full qualified name, Code Generator will try to
##                     import the packages automatically and shorten the name.
##                     For example `java.util.List<>` -> `List<>`
##
## References
## ----------
## - Velocity syntax: http://velocity.apache.org/engine/1.7/user-guide.html
